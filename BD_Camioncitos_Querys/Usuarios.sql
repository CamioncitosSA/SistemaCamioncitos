USE Camioncitos_DB;

CREATE TABLE TB_USUARIOS (
    ID_USUARIO INT IDENTITY PRIMARY KEY,
    USERNAME VARCHAR(80) NOT NULL,
    CLAVE VARBINARY(128) NOT NULL,
    ID_ROL INT NOT NULL,
    NOMBRE_USUARIO VARCHAR(80) NOT NULL,
    MAIL_CONTACTO VARCHAR(50)
);

ALTER TABLE TB_USUARIOS
ADD CONSTRAINT FK_USUARIO_ROL
FOREIGN KEY (ID_ROL)
REFERENCES TB_ROLES(ID_ROL);

-- SP REGISTRAR USUARIO
GO
CREATE PROCEDURE REGISTRAR_USUARIO
    @USERNAME VARCHAR(80),
    @CLAVE VARCHAR(128),
    @ID_ROL INT,
    @NOMBRE_USUARIO VARCHAR(80),
    @MAIL_CONTACTO VARCHAR(50)
AS
BEGIN
    IF EXISTS (SELECT * FROM TB_USUARIOS WHERE NOMBRE_USUARIO = @NOMBRE_USUARIO AND USERNAME = @USERNAME)
    BEGIN
        SELECT 'ERROR: El usuario [' + @NOMBRE_USUARIO + '] ya se encuentra registrado.'
        RETURN
    END

    -- SI NO EXISTE UNA COINCIDENCIA DE USUARIO YA REGISTRADO, ENTONCES CREA EL USUARIO
    INSERT INTO TB_USUARIOS (USERNAME, CLAVE, ID_ROL, NOMBRE_USUARIO, MAIL_CONTACTO)
    VALUES (@USERNAME, HASHBYTES('SHA2_512', @CLAVE), @ID_ROL, @NOMBRE_USUARIO, @MAIL_CONTACTO)

    SELECT 'Se ha registrado exitosamente el usuario: [' + @NOMBRE_USUARIO + ']'
END

-- SP CONSULTAR USUARIOS
GO
CREATE PROCEDURE CONSULTAR_USUARIOS
AS
BEGIN
    SELECT ID_USUARIO, USERNAME, ID_ROL, NOMBRE_USUARIO, MAIL_CONTACTO
    FROM TB_USUARIOS;
END

-- SP ACTUALIZAR USUARIO
GO
CREATE PROCEDURE ACTUALIZAR_USUARIO
    @ID_USUARIO INT,
    @USERNAME VARCHAR(80),
    @ID_ROL INT,
    @NOMBRE_USUARIO VARCHAR(80),
    @MAIL_CONTACTO VARCHAR(50)
AS
BEGIN
    IF EXISTS (SELECT * FROM TB_USUARIOS WHERE NOMBRE_USUARIO = @NOMBRE_USUARIO AND USERNAME = @USERNAME AND ID_ROL = @ID_ROL)
    BEGIN
        SELECT 'ERROR: El usuario [' + @NOMBRE_USUARIO + '] ya se encuentra registrado para el rol asignado.'
        RETURN
    END
    ELSE
    BEGIN
        UPDATE TB_USUARIOS
        SET USERNAME = @USERNAME,
            ID_ROL = @ID_ROL,
            NOMBRE_USUARIO = @NOMBRE_USUARIO,
            MAIL_CONTACTO = @MAIL_CONTACTO
        WHERE ID_USUARIO = @ID_USUARIO;

        SELECT 'Se ha actualizado el registro del usuario [' + @NOMBRE_USUARIO + '].'
    END
END

-- SP ELIMINAR USUARIO
GO
CREATE PROCEDURE ELIMINAR_USUARIO
(
    @ID_USUARIO INT
)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM TB_USUARIOS WHERE ID_USUARIO = @ID_USUARIO)
    BEGIN
        DELETE FROM TB_USUARIOS WHERE ID_USUARIO = @ID_USUARIO
        PRINT 'Eliminación exitosa.'
    END
    ELSE
    BEGIN
        PRINT 'No existe un usuario con ese ID.'
    END
END

-- SP VALIDAR LOGIN DE USUARIO
GO
CREATE PROCEDURE VALIDAR_LOGIN_USUARIO
    @USERNAME VARCHAR(80),
    @PASSWORD VARCHAR(128)
AS
BEGIN
    IF NOT EXISTS (SELECT * FROM TB_USUARIOS WHERE USERNAME = @USERNAME AND CLAVE = HASHBYTES('SHA2_512', @PASSWORD))
    BEGIN
        SELECT 'ERROR: USUARIO O CLAVE INCORRECTA';
    END
    ELSE
    BEGIN
        SELECT 'ACCESO EXITOSO'
    END
END

-- SP OBTENER USUARIO Y ROL
GO
CREATE PROCEDURE OBTENER_USUARIO_Y_ROL
    @USERNAME VARCHAR(80),
    @PASSWORD VARCHAR(128)
AS
BEGIN
    SELECT u.USERNAME AS NOMBRE_USUARIO, r.NOMBRE_ROL AS NOMBRE_ROL
    FROM TB_USUARIOS u
    INNER JOIN TB_ROLES r ON u.ID_ROL = r.ID_ROL
    WHERE u.USERNAME = @USERNAME AND u.CLAVE = HASHBYTES('SHA2_512', @PASSWORD);
END

-- SP OBTENER USUARIO
GO
CREATE PROCEDURE OBTENER_USUARIO
    @USERNAME VARCHAR(80),
    @PASSWORD VARCHAR(128)
AS
BEGIN
    SELECT u.USERNAME AS NOMBRE_USUARIO	
    FROM TB_USUARIOS u
    WHERE u.USERNAME = @USERNAME AND u.CLAVE = HASHBYTES('SHA2_512', @PASSWORD);
END

-- Insertar usuarios en la tabla TB_USUARIOS
EXEC REGISTRAR_USUARIO 'admin', 'admin', 1, 'ADMIN', 'admin@gmail.com';
EXEC REGISTRAR_USUARIO 'secretaria', 'secretaria001', 2, 'Secretaria', 'secretaria1@gmail.com';
EXEC REGISTRAR_USUARIO 'gerente', 'gerente001', 3, 'Gerente', 'gerente1@gmail.com';

SELECT * FROM TB_USUARIOS;

-- SP PARA ELIMINAR LOS VALORES DE LA TABLA Y LOS PROCEDIMIENTOS
BEGIN
    DROP TABLE TB_USUARIOS;
    DROP PROCEDURE REGISTRAR_USUARIO;
    DROP PROCEDURE CONSULTAR_USUARIOS;
    DROP PROCEDURE ACTUALIZAR_USUARIO;
    DROP PROCEDURE ELIMINAR_USUARIO;
    DROP PROCEDURE VALIDAR_LOGIN_USUARIO;
    DROP PROCEDURE OBTENER_USUARIO_Y_ROL;
    DROP PROCEDURE OBTENER_USUARIO;
END

DROP TABLE TB_USUARIOS;